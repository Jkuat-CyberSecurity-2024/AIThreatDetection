version: "3.8"

services:
  nginx:
    image: nginx:latest  # Use official NGINX image
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - static_volume:/app/static  # Serve static files
      - media_volume:/app/media    # Serve media files
      - ./nginx/log:/var/log/nginx  # For access log scraping
    ports:
      - "80:80"  # Expose NGINX on port 80
    depends_on:
      - django-1
      - django-2
      - django-3
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
        reservations:
          cpus: "0.2"
          memory: "256M"

  nginx_prometheus_exporter:
    image: nginx/nginx-prometheus-exporter:latest
    command:
      - "-nginx.scrape-uri=http://nginx/stub_status"  # This URL points to the stub_status endpoint in the NGINX container
    ports:
      - "9113:9113"  # Prometheus will scrape metrics from this port
    depends_on:
      - nginx
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9113/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  django-1:
    build: .
    volumes:
      - .:/app  # Mount the current directory to /app in the container
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - db
      - redis
    command:
      - sh
      - -c
      - |
          python manage.py migrate &&
          python manage.py collectstatic --noinput &&
          daphne -b 0.0.0.0 -p 8000 ThreatDetection.asgi:application
    ports:
      - "8001:8000"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1024M"
        reservations:
          cpus: "0.5"
          memory: "512M"

  django-2:
    build: .
    volumes:
      - .:/app  # Mount the current directory to /app in the container
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - db
      - redis
    command:
      - sh
      - -c
      - |
          python manage.py migrate &&
          python manage.py collectstatic --noinput &&
          daphne -b 0.0.0.0 -p 8000 ThreatDetection.asgi:application
    ports:
      - "8002:8000"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1024M"
        reservations:
          cpus: "0.5"
          memory: "512M"

  django-3:
    build: .
    volumes:
      - .:/app  # Mount the current directory to /app in the container
      - static_volume:/app/static
      - media_volume:/app/media
    depends_on:
      - db
      - redis
    command:
      - sh
      - -c
      - |
          python manage.py migrate &&
          python manage.py collectstatic --noinput &&
          daphne -b 0.0.0.0 -p 8000 ThreatDetection.asgi:application
    ports:
      - "8003:8000"
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1024M"
        reservations:
          cpus: "0.5"
          memory: "512M"

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus  # Persistent storage for Prometheus data
    ports:
      - "9090:9090"  # Expose Prometheus on port 9090
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "512M"

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana  # Persistent storage for Grafana data
    ports:
      - "3000:3000"  # Expose Grafana on port 3000
    networks:
      - backend-network
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Default admin password for Grafana
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"

  db:
    image: postgres:13
    environment:
      - POSTGRES_DB=ThreatDetectionApp
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=TD_password
    ports:
      - "5432:5432"
    networks:
      - backend-network
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persistent storage for the database
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1024M"
      restart_policy:
        condition: on-failure

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    networks:
      - backend-network
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"

  redis_exporter:
    image: oliver006/redis_exporter
    command:
      - "--redis.addr=redis:6379"
    ports:
      - "9121:9121"
    depends_on:
      - redis
    networks:
      - backend-network

networks:
  backend-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
